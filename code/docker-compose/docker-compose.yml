version: '3.4'

services:
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/bitnami/redis/data'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure
    ports:
      - 22181:2181
    volumes:
      - 'zk_data:/var/lib/zookeeper/data'
      - 'zk_txn_logs:/var/lib/zookeeper/log'
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
      - 9101:9101
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - 'kafka_data:/var/lib/kafka/data'

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "4317:4317"
      - "16686:16686"
    depends_on:
      - prometheus
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090

  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  mattcanello.newsfeed.rssreader:
    container_name: rss-reader
    image: ${DOCKER_REGISTRY-}mattcanellonewsfeedrssreader
    build:
      context: ..
      dockerfile: ./MattCanello.NewsFeed.RssReader/Dockerfile
    depends_on:
      - jaeger
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - OTLP_ENDPOINT_URL=http://jaeger:4317/
    ports:
      - "80"

  mattcanello.newsfeed.rssreader-dapr:
    container_name: rss-reader-dapr
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "rss-reader", "-app-port", "80", "--components-path", "./components" ]
    depends_on:
      - mattcanello.newsfeed.rssreader
      - redis
      - kafka
    restart: on-failure
    network_mode: "service:mattcanello.newsfeed.rssreader"
    volumes:
      - "../dapr/components/:/components"

  mattcanello.newsfeed.cronapi:
    container_name: cron-api
    image: ${DOCKER_REGISTRY-}mattcanellonewsfeedcronapi
    build:
      context: ..
      dockerfile: ./MattCanello.NewsFeed.CronApi/Dockerfile
    depends_on:
      - jaeger
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - OTLP_ENDPOINT_URL=http://jaeger:4317/
    ports:
      - "80"
      
  mattcanello.newsfeed.cronapi-dapr:
    container_name: cron-api-dapr
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "cron-api", "-app-port", "80", "--components-path", "./components" ]
    depends_on:
      - mattcanello.newsfeed.cronapi
      - redis
      - kafka
    restart: on-failure
    network_mode: "service:mattcanello.newsfeed.cronapi"
    volumes:
      - "../dapr/components/:/components"

volumes:
  redis_data:
    driver: local

  zk_data:
    driver: local

  zk_txn_logs:
    driver: local

  kafka_data:
    driver: local

  prom_data: