version: '3.4'

services:
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/bitnami/redis/data'
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure
    ports:
      - 22181:2181
    volumes:
      - 'zk_data:/var/lib/zookeeper/data'
      - 'zk_txn_logs:/var/lib/zookeeper/log'
    networks:
      - backend
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
      - 9101:9101
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - 'kafka_data:/var/lib/kafka/data'
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - node.name=es01
      - discovery.type=single-node
      - cluster.name=news-feed
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - backend
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
      
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - kibana-data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    restart: 'unless-stopped'
    networks:
      - backend

  elasticsearch-setup-index-template:
    image: curlimages/curl:8.6.0
    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - type: bind
        source: '../MattCanello.NewsFeed.SearchApi/Templates'
        target: '/data'
    restart: on-failure
    command: >
      -X PUT -H "Accept:application/json" -H "Content-Type:application/json" --data "@/data/entries-index-template.json" http://elasticsearch:9200/_index_template/entries
      
  elasticsearch-setup-search-template:
    image: curlimages/curl:8.6.0
    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - type: bind
        source: '../MattCanello.NewsFeed.SearchApi/Templates'
        target: '/data'
    restart: on-failure
    command: >
      -X PUT -H "Accept:application/json" -H "Content-Type:application/json" --data "@/data/entries-search-template.json" http://elasticsearch:9200/_scripts/entries-search
      
  mattcanello.newsfeed.rssreader:
    container_name: rss-reader
    image: ${DOCKER_REGISTRY-}mattcanellonewsfeedrssreader
    build:
      context: ..
      dockerfile: ./MattCanello.NewsFeed.RssReader/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "80"
    networks:
      - backend

  mattcanello.newsfeed.rssreader-dapr:
    container_name: rss-reader-dapr
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "rss-reader", "-app-port", "80", "--components-path", "./components" ]
    depends_on:
      - mattcanello.newsfeed.rssreader
      - redis
      - kafka
    restart: on-failure
    network_mode: "service:mattcanello.newsfeed.rssreader"
    volumes:
      - "../dapr/components/:/components"

  mattcanello.newsfeed.cronapi:
    container_name: cron-api
    image: ${DOCKER_REGISTRY-}mattcanellonewsfeedcronapi
    build:
      context: ..
      dockerfile: ./MattCanello.NewsFeed.CronApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "80"
    networks:
      - backend
      
  mattcanello.newsfeed.cronapi-dapr:
    container_name: cron-api-dapr
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "cron-api", "-app-port", "80", "--components-path", "./components" ]
    depends_on:
      - mattcanello.newsfeed.cronapi
      - redis
      - kafka
    restart: on-failure
    network_mode: "service:mattcanello.newsfeed.cronapi"
    volumes:
      - "../dapr/components/:/components"

  mattcanello.newsfeed.searchapi:
    container_name: search-api
    image: ${DOCKER_REGISTRY-}mattcanellonewsfeedsearchapi
    build:
      context: ..
      dockerfile: ./MattCanello.NewsFeed.SearchApi/Dockerfile
    depends_on:
      - elasticsearch
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "80"
    networks:
      - backend
      
  mattcanello.newsfeed.searchapi-dapr:
    container_name: search-api-dapr
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "search-api", "-app-port", "80", "--components-path", "./components" ]
    depends_on:
      - mattcanello.newsfeed.searchapi
      - kafka
    restart: on-failure
    network_mode: "service:mattcanello.newsfeed.searchapi"
    volumes:
      - "../dapr/components/:/components"

  mattcanello.newsfeed.adminapi:
    container_name: admin-api
    image: ${DOCKER_REGISTRY-}mattcanellonewsfeedadminapi
    build:
      context: ..
      dockerfile: ./MattCanello.NewsFeed.AdminApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "80"
    networks:
      - backend
      
  mattcanello.newsfeed.adminapi-dapr:
    container_name: admin-api-dapr
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "admin-api", "-app-port", "80", "--components-path", "./components" ]
    depends_on:
      - mattcanello.newsfeed.adminapi
      - kafka
    restart: on-failure
    network_mode: "service:mattcanello.newsfeed.adminapi"
    volumes:
      - "../dapr/components/:/components"

volumes:
  redis_data:
    driver: local

  zk_data:
    driver: local

  zk_txn_logs:
    driver: local

  kafka_data:
    driver: local

  elastic-data:
    driver: local

  kibana-data:
    driver: local

networks:
  backend:
    driver: bridge
